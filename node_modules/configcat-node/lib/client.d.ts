import * as configcatcommon from "configcat-common";
import { IConfigCatClient } from "configcat-common/lib/ConfigCatClient";
import { LogLevel } from "configcat-common/lib/index";
/** Create an instance of ConfigCatClient and setup Auto Polling mode with default options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Auto Polling
 */
export declare function createClient(sdkKey: string, options?: INodeAutoPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Auto Polling mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Auto Polling
 */
export declare function createClientWithAutoPoll(sdkKey: string, options?: INodeAutoPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Manual Polling mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Manual Polling
 */
export declare function createClientWithManualPoll(sdkKey: string, options?: INodeManualPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Lazy Loading mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Option for Lazy Loading
 */
export declare function createClientWithLazyLoad(sdkKey: string, options?: INodeLazyLoadingOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatConsoleLogger
 * @param logLevel Specifies message's filtering to output for the CofigCatConsoleLogger.
 */
export declare function createConsoleLogger(logLevel: LogLevel): configcatcommon.IConfigCatLogger;
export interface INodeAutoPollOptions extends configcatcommon.IAutoPollOptions {
}
export interface INodeLazyLoadingOptions extends configcatcommon.ILazyLoadingOptions {
}
export interface INodeManualPollOptions extends configcatcommon.IManualPollOptions {
}
export declare const DataGovernance: {
    /** Select this if your feature flags are published to all global CDN nodes. */
    Global: configcatcommon.DataGovernance;
    /** Select this if your feature flags are published to CDN nodes only in the EU. */
    EuOnly: configcatcommon.DataGovernance;
};
//# sourceMappingURL=client.d.ts.map