"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpConfigFetcher = void 0;
var tunnel = require("tunnel");
var got = require("got");
var ProjectConfig_1 = require("configcat-common/lib/ProjectConfig");
var HttpConfigFetcher = /** @class */ (function () {
    function HttpConfigFetcher() {
    }
    HttpConfigFetcher.prototype.fetchLogic = function (options, lastProjectConfig, callback) {
        var agent;
        if (options.proxy) {
            try {
                var proxy = new URL(options.proxy);
                var agentFactory = tunnel.httpsOverHttp;
                if (proxy.protocol === "https:") {
                    agentFactory = tunnel.httpsOverHttps;
                }
                agent = agentFactory({
                    proxy: {
                        host: proxy.hostname,
                        port: proxy.port,
                    }
                });
            }
            catch (_a) {
                options.logger.log("Failed to parse options.proxy: " + options.proxy);
            }
        }
        got.get(options.getUrl(), {
            agent: agent,
            headers: {
                "User-Agent": "ConfigCat-Node/" + options.clientVersion,
                "X-ConfigCat-UserAgent": "ConfigCat-Node/" + options.clientVersion,
                "If-None-Match": (lastProjectConfig && lastProjectConfig.HttpETag) ? lastProjectConfig.HttpETag : undefined
            }
        }).then(function (response) {
            if (response && response.statusCode === 304) {
                callback(new ProjectConfig_1.ProjectConfig(new Date().getTime(), JSON.stringify(lastProjectConfig.ConfigJSON), response.headers.etag));
            }
            else if (response && response.statusCode === 200) {
                callback(new ProjectConfig_1.ProjectConfig(new Date().getTime(), response.body, response.headers.etag));
            }
            else {
                // tslint:disable-next-line:max-line-length
                options.logger.error("Failed to download feature flags & settings from ConfigCat. Status: " + (response && response.statusCode) + " - " + (response && response.statusMessage));
                options.logger.info("Double-check your SDK Key on https://app.configcat.com/sdkkey");
                callback(lastProjectConfig);
            }
        }).catch(function (reason) {
            var response = reason.response;
            if (response && response.status === 304) {
                callback(new ProjectConfig_1.ProjectConfig(new Date().getTime(), JSON.stringify(lastProjectConfig.ConfigJSON), response.headers.etag));
            }
            else {
                var errorDetails = response
                    ? "Status: " + response.statusCode + " - " + response.statusMessage
                    : "Empty response from API. Error: " + reason.message;
                options.logger.error("Failed to download feature flags & settings from ConfigCat. " + errorDetails);
                options.logger.info("Double-check your SDK Key on https://app.configcat.com/sdkkey");
                callback(lastProjectConfig);
            }
        });
    };
    return HttpConfigFetcher;
}());
exports.HttpConfigFetcher = HttpConfigFetcher;
