var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ConfigServiceBase } from "./ConfigServiceBase";
import { ProjectConfig } from "./ProjectConfig";
var AutoPollConfigService = /** @class */ (function (_super) {
    __extends(AutoPollConfigService, _super);
    function AutoPollConfigService(configFetcher, autoPollConfig) {
        var _this = _super.call(this, configFetcher, autoPollConfig) || this;
        _this.configChanged = autoPollConfig.configChanged;
        _this.startRefreshWorker(autoPollConfig.pollIntervalSeconds * 1000);
        _this.maxInitWaitTimeStamp = new Date().getTime() + (autoPollConfig.maxInitWaitTimeSeconds * 1000);
        return _this;
    }
    AutoPollConfigService.prototype.getConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryReadFromCache(0)];
                    case 1:
                        p = _a.sent();
                        if (!p) {
                            return [2 /*return*/, this.refreshLogic(true)];
                        }
                        else {
                            return [2 /*return*/, new Promise(function (resolve) { return resolve(p); })];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AutoPollConfigService.prototype.refreshConfigAsync = function () {
        return this.refreshLogic(true);
    };
    AutoPollConfigService.prototype.dispose = function () {
        clearTimeout(this.timerId);
    };
    AutoPollConfigService.prototype.refreshLogic = function (forceUpdateCache) {
        var _this = this;
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var cachedConfig, newConfig, weDontHaveCachedYetButHaveNew, weHaveBothButTheyDiffers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseConfig.cache.get(this.baseConfig.getCacheKey())];
                    case 1:
                        cachedConfig = _a.sent();
                        return [4 /*yield*/, this.refreshLogicBaseAsync(cachedConfig, forceUpdateCache)];
                    case 2:
                        newConfig = _a.sent();
                        weDontHaveCachedYetButHaveNew = !cachedConfig && newConfig;
                        weHaveBothButTheyDiffers = cachedConfig && newConfig && !ProjectConfig.equals(cachedConfig, newConfig);
                        if (weDontHaveCachedYetButHaveNew || weHaveBothButTheyDiffers) {
                            this.configChanged();
                        }
                        resolve(newConfig);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    AutoPollConfigService.prototype.startRefreshWorker = function (delay) {
        var _this = this;
        this.refreshLogic(false).then(function (_) {
            _this.timerId = setTimeout(function () {
                _this.startRefreshWorker(delay);
            }, delay);
        });
    };
    AutoPollConfigService.prototype.tryReadFromCache = function (tries) {
        return __awaiter(this, void 0, void 0, function () {
            var p, diff, delay;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseConfig.cache.get(this.baseConfig.getCacheKey())];
                    case 1:
                        p = _a.sent();
                        if (!(this.maxInitWaitTimeStamp > new Date().getTime() && !p)) return [3 /*break*/, 3];
                        diff = this.maxInitWaitTimeStamp - new Date().getTime();
                        delay = 30 + (tries * tries * 20);
                        return [4 /*yield*/, this.sleep(Math.min(diff, delay))];
                    case 2:
                        _a.sent();
                        tries++;
                        return [2 /*return*/, this.tryReadFromCache(tries)];
                    case 3: return [2 /*return*/, new Promise(function (resolve) { return resolve(p); })];
                }
            });
        });
    };
    AutoPollConfigService.prototype.sleep = function (ms) {
        return new Promise(function (resolve) { return setTimeout(resolve, ms); });
    };
    return AutoPollConfigService;
}(ConfigServiceBase));
export { AutoPollConfigService };
