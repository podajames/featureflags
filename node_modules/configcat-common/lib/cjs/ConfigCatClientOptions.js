"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyLoadOptions = exports.ManualPollOptions = exports.AutoPollOptions = exports.OptionsBase = exports.DataGovernance = void 0;
var ConfigCatLogger_1 = require("./ConfigCatLogger");
var index_1 = require("./index");
var Cache_1 = require("./Cache");
var Version_1 = require("./Version");
/** Control the location of the config.json files containing your feature flags and settings within the ConfigCat CDN. */
var DataGovernance;
(function (DataGovernance) {
    /** Select this if your feature flags are published to all global CDN nodes. */
    DataGovernance[DataGovernance["Global"] = 0] = "Global";
    /** Select this if your feature flags are published to CDN nodes only in the EU. */
    DataGovernance[DataGovernance["EuOnly"] = 1] = "EuOnly";
})(DataGovernance = exports.DataGovernance || (exports.DataGovernance = {}));
var OptionsBase = /** @class */ (function () {
    function OptionsBase(apiKey, clientVersion, options, defaultCache) {
        var _a;
        this.configFileName = "config_v5";
        this.logger = new ConfigCatLogger_1.ConfigCatConsoleLogger(index_1.LogLevel.Warn);
        this.requestTimeoutMs = 30000;
        this.baseUrlOverriden = false;
        this.proxy = "";
        if (!apiKey) {
            throw new Error("Invalid 'apiKey' value");
        }
        if (!defaultCache) {
            defaultCache = new Cache_1.InMemoryCache();
        }
        this.apiKey = apiKey;
        this.clientVersion = clientVersion;
        this.dataGovernance = (_a = options === null || options === void 0 ? void 0 : options.dataGovernance) !== null && _a !== void 0 ? _a : DataGovernance.Global;
        this.cache = defaultCache;
        switch (this.dataGovernance) {
            case DataGovernance.EuOnly:
                this.baseUrl = "https://cdn-eu.configcat.com";
                break;
            default:
                this.baseUrl = "https://cdn-global.configcat.com";
                break;
        }
        if (options) {
            if (options.logger) {
                this.logger = options.logger;
            }
            if (options.requestTimeoutMs) {
                if (options.requestTimeoutMs < 0) {
                    throw new Error("Invalid 'requestTimeoutMs' value");
                }
                this.requestTimeoutMs = options.requestTimeoutMs;
            }
            if (options.baseUrl) {
                this.baseUrl = options.baseUrl;
                this.baseUrlOverriden = true;
            }
            if (options.proxy) {
                this.proxy = options.proxy;
            }
            if (options.cache) {
                this.cache = options.cache;
            }
        }
    }
    OptionsBase.prototype.getUrl = function () {
        return this.baseUrl + "/configuration-files/" + this.apiKey + "/" + this.configFileName + ".json";
    };
    OptionsBase.prototype.getCacheKey = function () {
        return "js_" + this.configFileName + "_" + this.apiKey;
    };
    return OptionsBase;
}());
exports.OptionsBase = OptionsBase;
var AutoPollOptions = /** @class */ (function (_super) {
    __extends(AutoPollOptions, _super);
    function AutoPollOptions(apiKey, options, defaultCache) {
        var _this = _super.call(this, apiKey, "a-" + Version_1.default, options, defaultCache) || this;
        /** The client's poll interval in seconds. Default: 60 seconds. */
        _this.pollIntervalSeconds = 60;
        /** You can subscribe to configuration changes with this callback. */
        _this.configChanged = function () { };
        /** Maximum waiting time between the client initialization and the first config acquisition in secconds. */
        _this.maxInitWaitTimeSeconds = 5;
        if (options) {
            if (options.pollIntervalSeconds !== undefined && options.pollIntervalSeconds !== null) {
                _this.pollIntervalSeconds = options.pollIntervalSeconds;
            }
            if (options.configChanged) {
                _this.configChanged = options.configChanged;
            }
            if (options.maxInitWaitTimeSeconds !== undefined && options.maxInitWaitTimeSeconds !== null) {
                _this.maxInitWaitTimeSeconds = options.maxInitWaitTimeSeconds;
            }
        }
        if (_this.pollIntervalSeconds < 1) {
            throw new Error("Invalid 'pollIntervalSeconds' value");
        }
        if (_this.maxInitWaitTimeSeconds < 0) {
            throw new Error("Invalid 'maxInitWaitTimeSeconds' value");
        }
        return _this;
    }
    return AutoPollOptions;
}(OptionsBase));
exports.AutoPollOptions = AutoPollOptions;
var ManualPollOptions = /** @class */ (function (_super) {
    __extends(ManualPollOptions, _super);
    function ManualPollOptions(apiKey, options, defaultCache) {
        return _super.call(this, apiKey, "m-" + Version_1.default, options, defaultCache) || this;
    }
    return ManualPollOptions;
}(OptionsBase));
exports.ManualPollOptions = ManualPollOptions;
var LazyLoadOptions = /** @class */ (function (_super) {
    __extends(LazyLoadOptions, _super);
    function LazyLoadOptions(apiKey, options, defaultCache) {
        var _this = _super.call(this, apiKey, "l-" + Version_1.default, options, defaultCache) || this;
        /** The cache TTL. */
        _this.cacheTimeToLiveSeconds = 60;
        if (options) {
            if (options.cacheTimeToLiveSeconds) {
                _this.cacheTimeToLiveSeconds = options.cacheTimeToLiveSeconds;
            }
        }
        if (!_this.cacheTimeToLiveSeconds || _this.cacheTimeToLiveSeconds < 1) {
            throw new Error("Invalid 'cacheTimeToLiveSeconds' value. Value must be greater than zero.");
        }
        return _this;
    }
    return LazyLoadOptions;
}(OptionsBase));
exports.LazyLoadOptions = LazyLoadOptions;
