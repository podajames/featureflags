import { IConfigCatLogger, IAutoPollOptions, ILazyLoadingOptions, IManualPollOptions, ICache } from "./index";
/** Control the location of the config.json files containing your feature flags and settings within the ConfigCat CDN. */
export declare enum DataGovernance {
    /** Select this if your feature flags are published to all global CDN nodes. */
    Global = 0,
    /** Select this if your feature flags are published to CDN nodes only in the EU. */
    EuOnly = 1
}
export interface IOptions {
    logger?: IConfigCatLogger;
    requestTimeoutMs?: number;
    baseUrl?: string;
    /** You can set a base_url if you want to use a proxy server between your application and ConfigCat */
    proxy?: string;
    /** Default: Global. Set this parameter to be in sync with the Data Governance preference on the Dashboard:
     * https://app.configcat.com/organization/data-governance (Only Organization Admins have access) */
    dataGovernance?: DataGovernance;
    /**
     * ICache instance for cache the config.
     */
    cache?: ICache;
}
export declare abstract class OptionsBase implements IOptions {
    private configFileName;
    logger: IConfigCatLogger;
    apiKey: string;
    clientVersion: string;
    requestTimeoutMs: number;
    baseUrl: string;
    baseUrlOverriden: boolean;
    proxy: string;
    dataGovernance: DataGovernance;
    cache: ICache;
    constructor(apiKey: string, clientVersion: string, options: IOptions, defaultCache: ICache);
    getUrl(): string;
    getCacheKey(): string;
}
export declare class AutoPollOptions extends OptionsBase implements IAutoPollOptions {
    /** The client's poll interval in seconds. Default: 60 seconds. */
    pollIntervalSeconds: number;
    /** You can subscribe to configuration changes with this callback. */
    configChanged: () => void;
    /** Maximum waiting time between the client initialization and the first config acquisition in secconds. */
    maxInitWaitTimeSeconds: number;
    constructor(apiKey: string, options: IAutoPollOptions, defaultCache: ICache);
}
export declare class ManualPollOptions extends OptionsBase implements IManualPollOptions {
    constructor(apiKey: string, options: IManualPollOptions, defaultCache: ICache);
}
export declare class LazyLoadOptions extends OptionsBase implements ILazyLoadingOptions {
    /** The cache TTL. */
    cacheTimeToLiveSeconds: number;
    constructor(apiKey: string, options: ILazyLoadingOptions, defaultCache: ICache);
}
//# sourceMappingURL=ConfigCatClientOptions.d.ts.map