"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGovernance = exports.createConsoleLogger = exports.createClientWithLazyLoad = exports.createClientWithManualPoll = exports.createClientWithAutoPoll = exports.createClient = void 0;
var configcatcommon = require("configcat-common");
var ConfigFetcher_1 = require("./ConfigFetcher");
var Cache_1 = require("./Cache");
/**
 * Create an instance of ConfigCatClient and setup Auto polling with default options.
 * @param {string} sdkkey - SDK Key to access your configuration.
 * @param options - Options for Auto polling
 */
function createClient(sdkkey, options) {
    return createClientWithAutoPoll(sdkkey, options);
}
exports.createClient = createClient;
/**
 * Create an instance of ConfigCatClient and setup Auto polling.
 * @param {string} sdkkey - SDK Key to access your configuration.
 * @param options - Options for Auto polling
 */
function createClientWithAutoPoll(sdkKey, options) {
    return configcatcommon.createClientWithAutoPoll(sdkKey, { configFetcher: new ConfigFetcher_1.HttpConfigFetcher(), cache: new Cache_1.LocalStorageCache() }, options);
}
exports.createClientWithAutoPoll = createClientWithAutoPoll;
/**
 * Create an instance of ConfigCatClient and setup Manual polling.
 * @param {string} sdkKey - SDK Key to access your configuration.
 * @param options - Options for Manual polling
 */
function createClientWithManualPoll(sdkKey, options) {
    return configcatcommon.createClientWithManualPoll(sdkKey, {
        configFetcher: new ConfigFetcher_1.HttpConfigFetcher(),
        cache: new Cache_1.LocalStorageCache(),
    }, options);
}
exports.createClientWithManualPoll = createClientWithManualPoll;
/**
 * Create an instance of ConfigCatClient and setup Lazy loading.
 * @param {string} sdkKey - SDK Key to access your configuration.
 * @param options - Options for Lazy loading
 */
function createClientWithLazyLoad(sdkKey, options) {
    return configcatcommon.createClientWithLazyLoad(sdkKey, { configFetcher: new ConfigFetcher_1.HttpConfigFetcher(), cache: new Cache_1.LocalStorageCache() }, options);
}
exports.createClientWithLazyLoad = createClientWithLazyLoad;
function createConsoleLogger(logLevel) {
    return configcatcommon.createConsoleLogger(logLevel);
}
exports.createConsoleLogger = createConsoleLogger;
exports.DataGovernance = {
    /** Select this if your feature flags are published to all global CDN nodes. */
    Global: configcatcommon.DataGovernance.Global,
    /** Select this if your feature flags are published to CDN nodes only in the EU. */
    EuOnly: configcatcommon.DataGovernance.EuOnly
};
exports.default = createClient;
